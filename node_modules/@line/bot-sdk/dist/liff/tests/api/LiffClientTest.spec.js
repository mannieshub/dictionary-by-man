"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../api");
const nock = require("nock");
const assert_1 = require("assert");
const pkg = require("../../../../package.json");
const channel_access_token = "test_channel_access_token";
describe("LiffClient", () => {
    before(() => nock.disableNetConnect());
    afterEach(() => nock.cleanAll());
    after(() => nock.enableNetConnect());
    const client = new api_1.LiffClient({
        channelAccessToken: channel_access_token,
    });
    it("addLIFFApp", async () => {
        const scope = nock("https://api.line.me", {
            reqheaders: {
                Authorization: `Bearer ${channel_access_token}`,
                "User-Agent": `${pkg.name}/${pkg.version}`,
            },
        })
            .post(u => u.includes("/liff/v1/apps"))
            .reply(200, {});
        const res = await client.addLIFFApp(
        // addLiffAppRequest: AddLiffAppRequest
        {});
        (0, assert_1.equal)(scope.isDone(), true);
    });
    it("deleteLIFFApp", async () => {
        const scope = nock("https://api.line.me", {
            reqheaders: {
                Authorization: `Bearer ${channel_access_token}`,
                "User-Agent": `${pkg.name}/${pkg.version}`,
            },
        })
            .delete(u => u.includes("/liff/v1/apps/{liffId}".replace("{liffId}", "DUMMY")))
            .reply(200, {});
        const res = await client.deleteLIFFApp(
        // liffId: string
        "DUMMY");
        (0, assert_1.equal)(scope.isDone(), true);
    });
    it("getAllLIFFApps", async () => {
        const scope = nock("https://api.line.me", {
            reqheaders: {
                Authorization: `Bearer ${channel_access_token}`,
                "User-Agent": `${pkg.name}/${pkg.version}`,
            },
        })
            .get(u => u.includes("/liff/v1/apps"))
            .reply(200, {});
        const res = await client.getAllLIFFApps();
        (0, assert_1.equal)(scope.isDone(), true);
    });
    it("updateLIFFApp", async () => {
        const scope = nock("https://api.line.me", {
            reqheaders: {
                Authorization: `Bearer ${channel_access_token}`,
                "User-Agent": `${pkg.name}/${pkg.version}`,
            },
        })
            .put(u => u.includes("/liff/v1/apps/{liffId}".replace("{liffId}", "DUMMY")))
            .reply(200, {});
        const res = await client.updateLIFFApp(
        // liffId: string
        "DUMMY", // liffId(string)
        // updateLiffAppRequest: UpdateLiffAppRequest
        {});
        (0, assert_1.equal)(scope.isDone(), true);
    });
});
