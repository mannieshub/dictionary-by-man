/**
 * LINE Messaging API
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AudienceMatchMessagesRequest } from "../model/audienceMatchMessagesRequest";
import { BotInfoResponse } from "../model/botInfoResponse";
import { BroadcastRequest } from "../model/broadcastRequest";
import { CreateRichMenuAliasRequest } from "../model/createRichMenuAliasRequest";
import { GetAggregationUnitNameListResponse } from "../model/getAggregationUnitNameListResponse";
import { GetAggregationUnitUsageResponse } from "../model/getAggregationUnitUsageResponse";
import { GetFollowersResponse } from "../model/getFollowersResponse";
import { GetWebhookEndpointResponse } from "../model/getWebhookEndpointResponse";
import { GroupMemberCountResponse } from "../model/groupMemberCountResponse";
import { GroupSummaryResponse } from "../model/groupSummaryResponse";
import { GroupUserProfileResponse } from "../model/groupUserProfileResponse";
import { IssueLinkTokenResponse } from "../model/issueLinkTokenResponse";
import { MarkMessagesAsReadRequest } from "../model/markMessagesAsReadRequest";
import { MembersIdsResponse } from "../model/membersIdsResponse";
import { MessageQuotaResponse } from "../model/messageQuotaResponse";
import { MulticastRequest } from "../model/multicastRequest";
import { NarrowcastProgressResponse } from "../model/narrowcastProgressResponse";
import { NarrowcastRequest } from "../model/narrowcastRequest";
import { NumberOfMessagesResponse } from "../model/numberOfMessagesResponse";
import { PnpMessagesRequest } from "../model/pnpMessagesRequest";
import { PushMessageRequest } from "../model/pushMessageRequest";
import { PushMessageResponse } from "../model/pushMessageResponse";
import { QuotaConsumptionResponse } from "../model/quotaConsumptionResponse";
import { ReplyMessageRequest } from "../model/replyMessageRequest";
import { ReplyMessageResponse } from "../model/replyMessageResponse";
import { RichMenuAliasListResponse } from "../model/richMenuAliasListResponse";
import { RichMenuAliasResponse } from "../model/richMenuAliasResponse";
import { RichMenuBatchProgressResponse } from "../model/richMenuBatchProgressResponse";
import { RichMenuBatchRequest } from "../model/richMenuBatchRequest";
import { RichMenuBulkLinkRequest } from "../model/richMenuBulkLinkRequest";
import { RichMenuBulkUnlinkRequest } from "../model/richMenuBulkUnlinkRequest";
import { RichMenuIdResponse } from "../model/richMenuIdResponse";
import { RichMenuListResponse } from "../model/richMenuListResponse";
import { RichMenuRequest } from "../model/richMenuRequest";
import { RichMenuResponse } from "../model/richMenuResponse";
import { RoomMemberCountResponse } from "../model/roomMemberCountResponse";
import { RoomUserProfileResponse } from "../model/roomUserProfileResponse";
import { SetWebhookEndpointRequest } from "../model/setWebhookEndpointRequest";
import { TestWebhookEndpointRequest } from "../model/testWebhookEndpointRequest";
import { TestWebhookEndpointResponse } from "../model/testWebhookEndpointResponse";
import { UpdateRichMenuAliasRequest } from "../model/updateRichMenuAliasRequest";
import { UserProfileResponse } from "../model/userProfileResponse";
import { ValidateMessageRequest } from "../model/validateMessageRequest";
import * as Types from "../../types";
interface httpClientConfig {
    baseURL?: string;
    channelAccessToken: string;
}
export declare class MessagingApiClient {
    private httpClient;
    constructor(config: httpClientConfig);
    private parseHTTPResponse;
    /**
     * Send a message using phone number
     * @param audienceMatchMessagesRequest
     *
     * @see <a href="https://developers.line.biz/en/reference/partner-docs/#phone-audience-match"> Documentation</a>
     */
    audienceMatch(audienceMatchMessagesRequest: AudienceMatchMessagesRequest): Promise<Types.MessageAPIResponseBase>;
    /**
     * Sends a message to multiple users at any time.
     * @param broadcastRequest
     * @param xLineRetryKey Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn\'t generated by LINE. Each developer must generate their own retry key.
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#send-broadcast-message"> Documentation</a>
     */
    broadcast(broadcastRequest: BroadcastRequest, xLineRetryKey?: string): Promise<object>;
    /**
     * Cancel default rich menu
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#cancel-default-rich-menu"> Documentation</a>
     */
    cancelDefaultRichMenu(): Promise<Types.MessageAPIResponseBase>;
    /**
     * Create rich menu
     * @param richMenuRequest
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#create-rich-menu"> Documentation</a>
     */
    createRichMenu(richMenuRequest: RichMenuRequest): Promise<RichMenuIdResponse>;
    /**
     * Create rich menu alias
     * @param createRichMenuAliasRequest
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#create-rich-menu-alias"> Documentation</a>
     */
    createRichMenuAlias(createRichMenuAliasRequest: CreateRichMenuAliasRequest): Promise<Types.MessageAPIResponseBase>;
    /**
     * Deletes a rich menu.
     * @param richMenuId ID of a rich menu
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#delete-rich-menu"> Documentation</a>
     */
    deleteRichMenu(richMenuId: string): Promise<Types.MessageAPIResponseBase>;
    /**
     * Delete rich menu alias
     * @param richMenuAliasId Rich menu alias ID that you want to delete.
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#delete-rich-menu-alias"> Documentation</a>
     */
    deleteRichMenuAlias(richMenuAliasId: string): Promise<Types.MessageAPIResponseBase>;
    /**
     * Get result of message delivery using phone number
     * @param date Date the message was sent  Format: `yyyyMMdd` (e.g. `20190831`) Time Zone: UTC+9
     *
     * @see <a href="https://developers.line.biz/en/reference/partner-docs/#get-phone-audience-match"> Documentation</a>
     */
    getAdPhoneMessageStatistics(date: string): Promise<NumberOfMessagesResponse>;
    /**
     * Get name list of units used this month
     * @param limit The maximum number of aggregation units you can get per request.
     * @param start Value of the continuation token found in the next property of the JSON object returned in the response. If you can\'t get all the aggregation units in one request, include this parameter to get the remaining array.
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-name-list-of-units-used-this-month"> Documentation</a>
     */
    getAggregationUnitNameList(limit?: string, start?: string): Promise<GetAggregationUnitNameListResponse>;
    /**
     * Get number of units used this month
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-number-of-units-used-this-month"> Documentation</a>
     */
    getAggregationUnitUsage(): Promise<GetAggregationUnitUsageResponse>;
    /**
     * Get bot info
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-bot-info"> Documentation</a>
     */
    getBotInfo(): Promise<BotInfoResponse>;
    /**
     * Gets the ID of the default rich menu set with the Messaging API.
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-default-rich-menu-id"> Documentation</a>
     */
    getDefaultRichMenuId(): Promise<RichMenuIdResponse>;
    /**
     * Get a list of users who added your LINE Official Account as a friend
     * @param start Value of the continuation token found in the next property of the JSON object returned in the response. Include this parameter to get the next array of user IDs.
     * @param limit The maximum number of user IDs to retrieve in a single request.
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-follower-ids"> Documentation</a>
     */
    getFollowers(start?: string, limit?: number): Promise<GetFollowersResponse>;
    /**
     * Get number of users in a group chat
     * @param groupId Group ID
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-members-group-count"> Documentation</a>
     */
    getGroupMemberCount(groupId: string): Promise<GroupMemberCountResponse>;
    /**
     * Get group chat member profile
     * @param groupId Group ID
     * @param userId User ID
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-group-member-profile"> Documentation</a>
     */
    getGroupMemberProfile(groupId: string, userId: string): Promise<GroupUserProfileResponse>;
    /**
     * Get group chat member user IDs
     * @param groupId Group ID
     * @param start Value of the continuation token found in the `next` property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-group-member-user-ids"> Documentation</a>
     */
    getGroupMembersIds(groupId: string, start?: string): Promise<MembersIdsResponse>;
    /**
     * Get group chat summary
     * @param groupId Group ID
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-group-summary"> Documentation</a>
     */
    getGroupSummary(groupId: string): Promise<GroupSummaryResponse>;
    /**
     * Gets the target limit for sending messages in the current month. The total number of the free messages and the additional messages is returned.
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-quota"> Documentation</a>
     */
    getMessageQuota(): Promise<MessageQuotaResponse>;
    /**
     * Gets the number of messages sent in the current month.
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-consumption"> Documentation</a>
     */
    getMessageQuotaConsumption(): Promise<QuotaConsumptionResponse>;
    /**
     * Gets the status of a narrowcast message.
     * @param requestId The narrowcast message\'s request ID. Each Messaging API request has a request ID.
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-narrowcast-progress-status"> Documentation</a>
     */
    getNarrowcastProgress(requestId: string): Promise<NarrowcastProgressResponse>;
    /**
     * Get number of sent broadcast messages
     * @param date Date the messages were sent  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-number-of-broadcast-messages"> Documentation</a>
     */
    getNumberOfSentBroadcastMessages(date: string): Promise<NumberOfMessagesResponse>;
    /**
     * Get number of sent multicast messages
     * @param date Date the messages were sent  Format: `yyyyMMdd` (e.g. `20191231`) Timezone: UTC+9
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-number-of-multicast-messages"> Documentation</a>
     */
    getNumberOfSentMulticastMessages(date: string): Promise<NumberOfMessagesResponse>;
    /**
     * Get number of sent push messages
     * @param date Date the messages were sent  Format: `yyyyMMdd` (e.g. `20191231`) Timezone: UTC+9
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-number-of-push-messages"> Documentation</a>
     */
    getNumberOfSentPushMessages(date: string): Promise<NumberOfMessagesResponse>;
    /**
     * Get number of sent reply messages
     * @param date Date the messages were sent  Format: `yyyyMMdd` (e.g. `20191231`) Timezone: UTC+9
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-number-of-reply-messages"> Documentation</a>
     */
    getNumberOfSentReplyMessages(date: string): Promise<NumberOfMessagesResponse>;
    /**
     * Get number of sent LINE notification messages
     * @param date Date the message was sent  Format: `yyyyMMdd` (Example:`20211231`) Time zone: UTC+9
     *
     * @see <a href="https://developers.line.biz/en/reference/partner-docs/#get-number-of-sent-line-notification-messages"> Documentation</a>
     */
    getPNPMessageStatistics(date: string): Promise<NumberOfMessagesResponse>;
    /**
     * Get profile
     * @param userId User ID
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-profile"> Documentation</a>
     */
    getProfile(userId: string): Promise<UserProfileResponse>;
    /**
     * Gets a rich menu via a rich menu ID.
     * @param richMenuId ID of a rich menu
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-rich-menu"> Documentation</a>
     */
    getRichMenu(richMenuId: string): Promise<RichMenuResponse>;
    /**
     * Get rich menu alias information
     * @param richMenuAliasId The rich menu alias ID whose information you want to obtain.
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-alias-by-id"> Documentation</a>
     */
    getRichMenuAlias(richMenuAliasId: string): Promise<RichMenuAliasResponse>;
    /**
     * Get list of rich menu alias
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-alias-list"> Documentation</a>
     */
    getRichMenuAliasList(): Promise<RichMenuAliasListResponse>;
    /**
     * Get the status of Replace or unlink a linked rich menus in batches.
     * @param requestId A request ID used to batch control the rich menu linked to the user. Each Messaging API request has a request ID.
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-batch-control-rich-menus-progress-status"> Documentation</a>
     */
    getRichMenuBatchProgress(requestId: string): Promise<RichMenuBatchProgressResponse>;
    /**
     * Get rich menu ID of user
     * @param userId User ID. Found in the `source` object of webhook event objects. Do not use the LINE ID used in LINE.
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-id-of-user"> Documentation</a>
     */
    getRichMenuIdOfUser(userId: string): Promise<RichMenuIdResponse>;
    /**
     * Get rich menu list
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-rich-menu-list"> Documentation</a>
     */
    getRichMenuList(): Promise<RichMenuListResponse>;
    /**
     * Get number of users in a multi-person chat
     * @param roomId Room ID
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-members-room-count"> Documentation</a>
     */
    getRoomMemberCount(roomId: string): Promise<RoomMemberCountResponse>;
    /**
     * Get multi-person chat member profile
     * @param roomId Room ID
     * @param userId User ID
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-room-member-profile"> Documentation</a>
     */
    getRoomMemberProfile(roomId: string, userId: string): Promise<RoomUserProfileResponse>;
    /**
     * Get multi-person chat member user IDs
     * @param roomId Room ID
     * @param start Value of the continuation token found in the `next` property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-room-member-user-ids"> Documentation</a>
     */
    getRoomMembersIds(roomId: string, start?: string): Promise<MembersIdsResponse>;
    /**
     * Get webhook endpoint information
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-webhook-endpoint-information"> Documentation</a>
     */
    getWebhookEndpoint(): Promise<GetWebhookEndpointResponse>;
    /**
     * Issue link token
     * @param userId User ID for the LINE account to be linked. Found in the `source` object of account link event objects. Do not use the LINE ID used in LINE.
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#issue-link-token"> Documentation</a>
     */
    issueLinkToken(userId: string): Promise<IssueLinkTokenResponse>;
    /**
     * Leave group chat
     * @param groupId Group ID
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#leave-group"> Documentation</a>
     */
    leaveGroup(groupId: string): Promise<Types.MessageAPIResponseBase>;
    /**
     * Leave multi-person chat
     * @param roomId Room ID
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#leave-room"> Documentation</a>
     */
    leaveRoom(roomId: string): Promise<Types.MessageAPIResponseBase>;
    /**
     * Link rich menu to user.
     * @param userId User ID. Found in the `source` object of webhook event objects. Do not use the LINE ID used in LINE.
     * @param richMenuId ID of a rich menu
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#link-rich-menu-to-user"> Documentation</a>
     */
    linkRichMenuIdToUser(userId: string, richMenuId: string): Promise<Types.MessageAPIResponseBase>;
    /**
     * Link rich menu to multiple users
     * @param richMenuBulkLinkRequest
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#link-rich-menu-to-users"> Documentation</a>
     */
    linkRichMenuIdToUsers(richMenuBulkLinkRequest: RichMenuBulkLinkRequest): Promise<Types.MessageAPIResponseBase>;
    /**
     * Mark messages from users as read
     * @param markMessagesAsReadRequest
     *
     * @see <a href="https://developers.line.biz/en/reference/partner-docs/#mark-messages-from-users-as-read"> Documentation</a>
     */
    markMessagesAsRead(markMessagesAsReadRequest: MarkMessagesAsReadRequest): Promise<Types.MessageAPIResponseBase>;
    /**
     * An API that efficiently sends the same message to multiple user IDs. You can\'t send messages to group chats or multi-person chats.
     * @param multicastRequest
     * @param xLineRetryKey Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn\'t generated by LINE. Each developer must generate their own retry key.
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#send-multicast-message"> Documentation</a>
     */
    multicast(multicastRequest: MulticastRequest, xLineRetryKey?: string): Promise<object>;
    /**
     * Send narrowcast message
     * @param narrowcastRequest
     * @param xLineRetryKey Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn\'t generated by LINE. Each developer must generate their own retry key.
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#send-narrowcast-message"> Documentation</a>
     */
    narrowcast(narrowcastRequest: NarrowcastRequest, xLineRetryKey?: string): Promise<object>;
    /**
     * Sends a message to a user, group chat, or multi-person chat at any time.
     * @param pushMessageRequest
     * @param xLineRetryKey Retry key. Specifies the UUID in hexadecimal format (e.g., `123e4567-e89b-12d3-a456-426614174000`) generated by any method. The retry key isn\'t generated by LINE. Each developer must generate their own retry key.
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#send-push-message"> Documentation</a>
     */
    pushMessage(pushMessageRequest: PushMessageRequest, xLineRetryKey?: string): Promise<PushMessageResponse>;
    /**
     * Send LINE notification message
     * @param pnpMessagesRequest
     * @param xLineDeliveryTag String returned in the delivery.data property of the delivery completion event via Webhook.
     *
     * @see <a href="https://developers.line.biz/en/reference/partner-docs/#send-line-notification-message"> Documentation</a>
     */
    pushMessagesByPhone(pnpMessagesRequest: PnpMessagesRequest, xLineDeliveryTag?: string): Promise<Types.MessageAPIResponseBase>;
    /**
     * Send reply message
     * @param replyMessageRequest
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#send-reply-message"> Documentation</a>
     */
    replyMessage(replyMessageRequest: ReplyMessageRequest): Promise<ReplyMessageResponse>;
    /**
     * You can use this endpoint to batch control the rich menu linked to the users using the endpoint such as Link rich menu to user.  The following operations are available:  1. Replace a rich menu with another rich menu for all users linked to a specific rich menu 2. Unlink a rich menu for all users linked to a specific rich menu 3. Unlink a rich menu for all users linked the rich menu
     * @param richMenuBatchRequest
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#batch-control-rich-menus-of-users"> Documentation</a>
     */
    richMenuBatch(richMenuBatchRequest: RichMenuBatchRequest): Promise<Types.MessageAPIResponseBase>;
    /**
     * Set default rich menu
     * @param richMenuId ID of a rich menu
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#set-default-rich-menu"> Documentation</a>
     */
    setDefaultRichMenu(richMenuId: string): Promise<Types.MessageAPIResponseBase>;
    /**
     * Set webhook endpoint URL
     * @param setWebhookEndpointRequest
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#set-webhook-endpoint-url"> Documentation</a>
     */
    setWebhookEndpoint(setWebhookEndpointRequest: SetWebhookEndpointRequest): Promise<Types.MessageAPIResponseBase>;
    /**
     * Test webhook endpoint
     * @param testWebhookEndpointRequest
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#test-webhook-endpoint"> Documentation</a>
     */
    testWebhookEndpoint(testWebhookEndpointRequest?: TestWebhookEndpointRequest): Promise<TestWebhookEndpointResponse>;
    /**
     * Unlink rich menu from user
     * @param userId User ID. Found in the `source` object of webhook event objects. Do not use the LINE ID used in LINE.
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#unlink-rich-menu-from-user"> Documentation</a>
     */
    unlinkRichMenuIdFromUser(userId: string): Promise<Types.MessageAPIResponseBase>;
    /**
     * Unlink rich menus from multiple users
     * @param richMenuBulkUnlinkRequest
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#unlink-rich-menu-from-users"> Documentation</a>
     */
    unlinkRichMenuIdFromUsers(richMenuBulkUnlinkRequest: RichMenuBulkUnlinkRequest): Promise<Types.MessageAPIResponseBase>;
    /**
     * Update rich menu alias
     * @param richMenuAliasId The rich menu alias ID you want to update.
     * @param updateRichMenuAliasRequest
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#update-rich-menu-alias"> Documentation</a>
     */
    updateRichMenuAlias(richMenuAliasId: string, updateRichMenuAliasRequest: UpdateRichMenuAliasRequest): Promise<Types.MessageAPIResponseBase>;
    /**
     * Validate message objects of a broadcast message
     * @param validateMessageRequest
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-broadcast-message"> Documentation</a>
     */
    validateBroadcast(validateMessageRequest: ValidateMessageRequest): Promise<Types.MessageAPIResponseBase>;
    /**
     * Validate message objects of a multicast message
     * @param validateMessageRequest
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-multicast-message"> Documentation</a>
     */
    validateMulticast(validateMessageRequest: ValidateMessageRequest): Promise<Types.MessageAPIResponseBase>;
    /**
     * Validate message objects of a narrowcast message
     * @param validateMessageRequest
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-narrowcast-message"> Documentation</a>
     */
    validateNarrowcast(validateMessageRequest: ValidateMessageRequest): Promise<Types.MessageAPIResponseBase>;
    /**
     * Validate message objects of a push message
     * @param validateMessageRequest
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-push-message"> Documentation</a>
     */
    validatePush(validateMessageRequest: ValidateMessageRequest): Promise<Types.MessageAPIResponseBase>;
    /**
     * Validate message objects of a reply message
     * @param validateMessageRequest
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#validate-message-objects-of-reply-message"> Documentation</a>
     */
    validateReply(validateMessageRequest: ValidateMessageRequest): Promise<Types.MessageAPIResponseBase>;
    /**
     * Validate a request body of the Replace or unlink the linked rich menus in batches endpoint.
     * @param richMenuBatchRequest
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#validate-batch-control-rich-menus-request"> Documentation</a>
     */
    validateRichMenuBatchRequest(richMenuBatchRequest: RichMenuBatchRequest): Promise<Types.MessageAPIResponseBase>;
    /**
     * Validate rich menu object
     * @param richMenuRequest
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#validate-rich-menu-object"> Documentation</a>
     */
    validateRichMenuObject(richMenuRequest: RichMenuRequest): Promise<Types.MessageAPIResponseBase>;
}
export {};
