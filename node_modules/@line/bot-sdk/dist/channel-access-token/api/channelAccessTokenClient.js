"use strict";
/**
 * Channel Access Token API
 * This document describes Channel Access Token API.
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelAccessTokenClient = void 0;
const Types = require("../../types");
const utils_1 = require("../../utils");
const http_1 = require("../../http");
class ChannelAccessTokenClient {
    constructor(config) {
        if (!config.baseURL) {
            config.baseURL = "https://api.line.me";
        }
        this.httpClient = new http_1.default({
            defaultHeaders: {
                Authorization: "Bearer " + config.channelAccessToken,
            },
            responseParser: this.parseHTTPResponse.bind(this),
            baseURL: config.baseURL,
        });
    }
    parseHTTPResponse(response) {
        const { LINE_REQUEST_ID_HTTP_HEADER_NAME } = Types;
        let resBody = Object.assign({}, response.data);
        if (response.headers[LINE_REQUEST_ID_HTTP_HEADER_NAME]) {
            resBody[LINE_REQUEST_ID_HTTP_HEADER_NAME] =
                response.headers[LINE_REQUEST_ID_HTTP_HEADER_NAME];
        }
        return resBody;
    }
    /**
     * Gets all valid channel access token key IDs.
     * @param clientAssertionType `urn:ietf:params:oauth:client-assertion-type:jwt-bearer`
     * @param clientAssertion A JSON Web Token (JWT) (opens new window)the client needs to create and sign with the private key.
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#get-all-valid-channel-access-token-key-ids-v2-1"> Documentation</a>
     */
    async getsAllValidChannelAccessTokenKeyIds(clientAssertionType, clientAssertion) {
        const queryParams = {
            clientAssertionType: clientAssertionType,
            clientAssertion: clientAssertion,
        };
        const res = this.httpClient.get("/oauth2/v2.1/tokens/kid", queryParams);
        return (0, utils_1.ensureJSON)(res);
    }
    /**
     * Issue short-lived channel access token
     * @param grantType `client_credentials`
     * @param clientId Channel ID.
     * @param clientSecret Channel secret.
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#issue-shortlived-channel-access-token"> Documentation</a>
     */
    async issueChannelToken(grantType, clientId, clientSecret) {
        const formParams = {
            grantType: grantType,
            clientId: clientId,
            clientSecret: clientSecret,
        };
        const res = this.httpClient.postForm("/v2/oauth/accessToken", formParams);
        return (0, utils_1.ensureJSON)(res);
    }
    /**
     * Issues a channel access token that allows you to specify a desired expiration date. This method lets you use JWT assertion for authentication.
     * @param grantType client_credentials
     * @param clientAssertionType urn:ietf:params:oauth:client-assertion-type:jwt-bearer
     * @param clientAssertion A JSON Web Token the client needs to create and sign with the private key of the Assertion Signing Key.
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#issue-channel-access-token-v2-1"> Documentation</a>
     */
    async issueChannelTokenByJWT(grantType, clientAssertionType, clientAssertion) {
        const formParams = {
            grantType: grantType,
            clientAssertionType: clientAssertionType,
            clientAssertion: clientAssertion,
        };
        const res = this.httpClient.postForm("/oauth2/v2.1/token", formParams);
        return (0, utils_1.ensureJSON)(res);
    }
    /**
     * Issues a new stateless channel access token, which doesn\'t have max active token limit unlike the other token types. The newly issued token is only valid for 15 minutes but can not be revoked until it naturally expires.
     * @param grantType `client_credentials`
     * @param clientAssertionType URL-encoded value of `urn:ietf:params:oauth:client-assertion-type:jwt-bearer`
     * @param clientAssertion A JSON Web Token the client needs to create and sign with the private key of the Assertion Signing Key.
     * @param clientId Channel ID.
     * @param clientSecret Channel secret.
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#issue-stateless-channel-access-token"> Documentation</a>
     */
    async issueStatelessChannelToken(grantType, clientAssertionType, clientAssertion, clientId, clientSecret) {
        const formParams = {
            grantType: grantType,
            clientAssertionType: clientAssertionType,
            clientAssertion: clientAssertion,
            clientId: clientId,
            clientSecret: clientSecret,
        };
        const res = this.httpClient.postForm("/oauth2/v3/token", formParams);
        return (0, utils_1.ensureJSON)(res);
    }
    /**
     * Revoke short-lived or long-lived channel access token
     * @param accessToken Channel access token
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#revoke-longlived-or-shortlived-channel-access-token"> Documentation</a>
     */
    async revokeChannelToken(accessToken) {
        const formParams = {
            accessToken: accessToken,
        };
        const res = this.httpClient.postForm("/v2/oauth/revoke", formParams);
        return (0, utils_1.ensureJSON)(res);
    }
    /**
     * Revoke channel access token v2.1
     * @param clientId Channel ID
     * @param clientSecret Channel Secret
     * @param accessToken Channel access token
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#revoke-channel-access-token-v2-1"> Documentation</a>
     */
    async revokeChannelTokenByJWT(clientId, clientSecret, accessToken) {
        const formParams = {
            clientId: clientId,
            clientSecret: clientSecret,
            accessToken: accessToken,
        };
        const res = this.httpClient.postForm("/oauth2/v2.1/revoke", formParams);
        return (0, utils_1.ensureJSON)(res);
    }
    /**
     * Verify the validity of short-lived and long-lived channel access tokens
     * @param accessToken A short-lived or long-lived channel access token.
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#verfiy-channel-access-token"> Documentation</a>
     */
    async verifyChannelToken(accessToken) {
        const formParams = {
            accessToken: accessToken,
        };
        const res = this.httpClient.postForm("/v2/oauth/verify", formParams);
        return (0, utils_1.ensureJSON)(res);
    }
    /**
     * You can verify whether a Channel access token with a user-specified expiration (Channel Access Token v2.1) is valid.
     * @param accessToken Channel access token with a user-specified expiration (Channel Access Token v2.1).
     *
     * @see <a href="https://developers.line.biz/en/reference/messaging-api/#verfiy-channel-access-token-v2-1"> Documentation</a>
     */
    async verifyChannelTokenByJWT(accessToken) {
        const queryParams = {
            accessToken: accessToken,
        };
        const res = this.httpClient.get("/oauth2/v2.1/verify", queryParams);
        return (0, utils_1.ensureJSON)(res);
    }
}
exports.ChannelAccessTokenClient = ChannelAccessTokenClient;
