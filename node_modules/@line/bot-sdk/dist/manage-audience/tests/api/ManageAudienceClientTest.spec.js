"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../api");
const nock = require("nock");
const assert_1 = require("assert");
const pkg = require("../../../../package.json");
const channel_access_token = "test_channel_access_token";
describe("ManageAudienceClient", () => {
    before(() => nock.disableNetConnect());
    afterEach(() => nock.cleanAll());
    after(() => nock.enableNetConnect());
    const client = new api_1.ManageAudienceClient({
        channelAccessToken: channel_access_token,
    });
    it("activateAudienceGroup", async () => {
        const scope = nock("https://api.line.me", {
            reqheaders: {
                Authorization: `Bearer ${channel_access_token}`,
                "User-Agent": `${pkg.name}/${pkg.version}`,
            },
        })
            .put(u => u.includes("/v2/bot/audienceGroup/{audienceGroupId}/activate".replace("{audienceGroupId}", "0")))
            .reply(200, {});
        const res = await client.activateAudienceGroup(
        // audienceGroupId: number
        0);
        (0, assert_1.equal)(scope.isDone(), true);
    });
    it("addAudienceToAudienceGroup", async () => {
        const scope = nock("https://api.line.me", {
            reqheaders: {
                Authorization: `Bearer ${channel_access_token}`,
                "User-Agent": `${pkg.name}/${pkg.version}`,
            },
        })
            .put(u => u.includes("/v2/bot/audienceGroup/upload"))
            .reply(200, {});
        const res = await client.addAudienceToAudienceGroup(
        // addAudienceToAudienceGroupRequest: AddAudienceToAudienceGroupRequest
        {});
        (0, assert_1.equal)(scope.isDone(), true);
    });
    it("createAudienceGroup", async () => {
        const scope = nock("https://api.line.me", {
            reqheaders: {
                Authorization: `Bearer ${channel_access_token}`,
                "User-Agent": `${pkg.name}/${pkg.version}`,
            },
        })
            .post(u => u.includes("/v2/bot/audienceGroup/upload"))
            .reply(200, {});
        const res = await client.createAudienceGroup(
        // createAudienceGroupRequest: CreateAudienceGroupRequest
        {});
        (0, assert_1.equal)(scope.isDone(), true);
    });
    it("createClickBasedAudienceGroup", async () => {
        const scope = nock("https://api.line.me", {
            reqheaders: {
                Authorization: `Bearer ${channel_access_token}`,
                "User-Agent": `${pkg.name}/${pkg.version}`,
            },
        })
            .post(u => u.includes("/v2/bot/audienceGroup/click"))
            .reply(200, {});
        const res = await client.createClickBasedAudienceGroup(
        // createClickBasedAudienceGroupRequest: CreateClickBasedAudienceGroupRequest
        {});
        (0, assert_1.equal)(scope.isDone(), true);
    });
    it("createImpBasedAudienceGroup", async () => {
        const scope = nock("https://api.line.me", {
            reqheaders: {
                Authorization: `Bearer ${channel_access_token}`,
                "User-Agent": `${pkg.name}/${pkg.version}`,
            },
        })
            .post(u => u.includes("/v2/bot/audienceGroup/imp"))
            .reply(200, {});
        const res = await client.createImpBasedAudienceGroup(
        // createImpBasedAudienceGroupRequest: CreateImpBasedAudienceGroupRequest
        {});
        (0, assert_1.equal)(scope.isDone(), true);
    });
    it("deleteAudienceGroup", async () => {
        const scope = nock("https://api.line.me", {
            reqheaders: {
                Authorization: `Bearer ${channel_access_token}`,
                "User-Agent": `${pkg.name}/${pkg.version}`,
            },
        })
            .delete(u => u.includes("/v2/bot/audienceGroup/{audienceGroupId}".replace("{audienceGroupId}", "0")))
            .reply(200, {});
        const res = await client.deleteAudienceGroup(
        // audienceGroupId: number
        0);
        (0, assert_1.equal)(scope.isDone(), true);
    });
    it("getAudienceData", async () => {
        const scope = nock("https://api.line.me", {
            reqheaders: {
                Authorization: `Bearer ${channel_access_token}`,
                "User-Agent": `${pkg.name}/${pkg.version}`,
            },
        })
            .get(u => u.includes("/v2/bot/audienceGroup/{audienceGroupId}".replace("{audienceGroupId}", "0")))
            .reply(200, {});
        const res = await client.getAudienceData(
        // audienceGroupId: number
        0);
        (0, assert_1.equal)(scope.isDone(), true);
    });
    it("getAudienceGroupAuthorityLevel", async () => {
        const scope = nock("https://api.line.me", {
            reqheaders: {
                Authorization: `Bearer ${channel_access_token}`,
                "User-Agent": `${pkg.name}/${pkg.version}`,
            },
        })
            .get(u => u.includes("/v2/bot/audienceGroup/authorityLevel"))
            .reply(200, {});
        const res = await client.getAudienceGroupAuthorityLevel();
        (0, assert_1.equal)(scope.isDone(), true);
    });
    it("getAudienceGroups", async () => {
        const scope = nock("https://api.line.me", {
            reqheaders: {
                Authorization: `Bearer ${channel_access_token}`,
                "User-Agent": `${pkg.name}/${pkg.version}`,
            },
        })
            .get(u => u.includes("/v2/bot/audienceGroup/list"
            .replace("{page}", "0") // number
            .replace("{description}", "DUMMY") // string
            .replace("{size}", "0")))
            .reply(200, {});
        const res = await client.getAudienceGroups(
        // page: number
        "DUMMY", // paramName=page(enum)
        // description: string
        "DUMMY", // paramName=description(enum)
        // status: AudienceGroupStatus
        "DUMMY", // paramName=status(enum)
        // size: number
        "DUMMY", // paramName=size(enum)
        // includesExternalPublicGroups: boolean
        "DUMMY", // paramName=includesExternalPublicGroups(enum)
        // createRoute: AudienceGroupCreateRoute
        "DUMMY");
        (0, assert_1.equal)(scope.isDone(), true);
    });
    it("updateAudienceGroupAuthorityLevel", async () => {
        const scope = nock("https://api.line.me", {
            reqheaders: {
                Authorization: `Bearer ${channel_access_token}`,
                "User-Agent": `${pkg.name}/${pkg.version}`,
            },
        })
            .put(u => u.includes("/v2/bot/audienceGroup/authorityLevel"))
            .reply(200, {});
        const res = await client.updateAudienceGroupAuthorityLevel(
        // updateAudienceGroupAuthorityLevelRequest: UpdateAudienceGroupAuthorityLevelRequest
        {});
        (0, assert_1.equal)(scope.isDone(), true);
    });
    it("updateAudienceGroupDescription", async () => {
        const scope = nock("https://api.line.me", {
            reqheaders: {
                Authorization: `Bearer ${channel_access_token}`,
                "User-Agent": `${pkg.name}/${pkg.version}`,
            },
        })
            .put(u => u.includes("/v2/bot/audienceGroup/{audienceGroupId}/updateDescription".replace("{audienceGroupId}", "0")))
            .reply(200, {});
        const res = await client.updateAudienceGroupDescription(
        // audienceGroupId: number
        0, // paramName=audienceGroupId(number or int or long)
        // updateAudienceGroupDescriptionRequest: UpdateAudienceGroupDescriptionRequest
        {});
        (0, assert_1.equal)(scope.isDone(), true);
    });
});
