"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("../../api");
const nock = require("nock");
const assert_1 = require("assert");
const pkg = require("../../../../package.json");
const channel_access_token = "test_channel_access_token";
describe("InsightClient", () => {
    before(() => nock.disableNetConnect());
    afterEach(() => nock.cleanAll());
    after(() => nock.enableNetConnect());
    const client = new api_1.InsightClient({
        channelAccessToken: channel_access_token,
    });
    it("getFriendsDemographics", async () => {
        const scope = nock("https://api.line.me", {
            reqheaders: {
                Authorization: `Bearer ${channel_access_token}`,
                "User-Agent": `${pkg.name}/${pkg.version}`,
            },
        })
            .get(u => u.includes("/v2/bot/insight/demographic"))
            .reply(200, {});
        const res = await client.getFriendsDemographics();
        (0, assert_1.equal)(scope.isDone(), true);
    });
    it("getMessageEvent", async () => {
        const scope = nock("https://api.line.me", {
            reqheaders: {
                Authorization: `Bearer ${channel_access_token}`,
                "User-Agent": `${pkg.name}/${pkg.version}`,
            },
        })
            .get(u => u.includes("/v2/bot/insight/message/event".replace("{requestId}", "DUMMY")))
            .reply(200, {});
        const res = await client.getMessageEvent(
        // requestId: string
        "DUMMY");
        (0, assert_1.equal)(scope.isDone(), true);
    });
    it("getNumberOfFollowers", async () => {
        const scope = nock("https://api.line.me", {
            reqheaders: {
                Authorization: `Bearer ${channel_access_token}`,
                "User-Agent": `${pkg.name}/${pkg.version}`,
            },
        })
            .get(u => u.includes("/v2/bot/insight/followers".replace("{date}", "DUMMY")))
            .reply(200, {});
        const res = await client.getNumberOfFollowers(
        // date: string
        "DUMMY");
        (0, assert_1.equal)(scope.isDone(), true);
    });
    it("getNumberOfMessageDeliveries", async () => {
        const scope = nock("https://api.line.me", {
            reqheaders: {
                Authorization: `Bearer ${channel_access_token}`,
                "User-Agent": `${pkg.name}/${pkg.version}`,
            },
        })
            .get(u => u.includes("/v2/bot/insight/message/delivery".replace("{date}", "DUMMY")))
            .reply(200, {});
        const res = await client.getNumberOfMessageDeliveries(
        // date: string
        "DUMMY");
        (0, assert_1.equal)(scope.isDone(), true);
    });
    it("getStatisticsPerUnit", async () => {
        const scope = nock("https://api.line.me", {
            reqheaders: {
                Authorization: `Bearer ${channel_access_token}`,
                "User-Agent": `${pkg.name}/${pkg.version}`,
            },
        })
            .get(u => u.includes("/v2/bot/insight/message/event/aggregation"
            .replace("{customAggregationUnit}", "DUMMY") // string
            .replace("{from}", "DUMMY") // string
            .replace("{to}", "DUMMY")))
            .reply(200, {});
        const res = await client.getStatisticsPerUnit(
        // customAggregationUnit: string
        "DUMMY", // paramName=customAggregationUnit(enum)
        // from: string
        "DUMMY", // paramName=from(enum)
        // to: string
        "DUMMY");
        (0, assert_1.equal)(scope.isDone(), true);
    });
});
